# -*- coding: utf-8 -*-
"""exploratory_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16W6ZbzMR-HZEjH_aS9bsk9tiF4pEqb14

# 1. Loading and inspection of data
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# File path
file_path = "amazon_reviews_books_sample.csv"

# Load dataset
df = pd.read_csv(file_path)

# Preview the first 5 rows
df.head()

# Check dataset shape
print("Rows, Columns:", df.shape)

# Column data types
print(df.dtypes)

# Check for missing values
print(df.isnull().sum())

# Basic statistics for numeric columns
print(df[['star_rating', 'helpful_votes', 'total_votes']].describe())

# Count of unique values for categorical columns
print(df['verified_purchase'].value_counts())
print(df['vine'].value_counts())

"""# Visualizing distribution

Star Rating Distribution (Histogram / Bar Plot)

* Shows how ratings are spread (are they mostly 5 stars or balanced?).
* Helps detect bias in reviews.
"""

# Plot distribution of star ratings
plt.figure(figsize=(6,4))
df["star_rating"].value_counts().sort_index().plot(kind="bar")
plt.title("Distribution of Star Ratings")
plt.xlabel("Star Rating")
plt.ylabel("Count of Reviews")
plt.show()

"""Helpful Votes Distribution (Histogram)
*   Identifies how many reviews actually get voted as "helpful".
*   Most reviews get few votes, but some might spike (outliers).
"""

# Plot distribution of helpful votes
plt.figure(figsize=(6,4))
df["helpful_votes"].plot(kind="hist", bins=30, edgecolor="black")
plt.title("Distribution of Helpful Votes")
plt.xlabel("Helpful Votes")
plt.ylabel("Frequency")
plt.show()

"""Reviews Over Time (Line Chart)
* Reveals review volume trends over months/years.
* Peaks might align with book launches, promotions, or seasonal demand.
"""

# Plot review counts over time
df["review_date"] = pd.to_datetime(df["review_date"], errors="coerce")
reviews_over_time = df.groupby(df["review_date"].dt.to_period("M")).size()

plt.figure(figsize=(10,4))
reviews_over_time.plot(kind="line", marker="o")
plt.title("Number of Reviews Over Time")
plt.xlabel("Review Month")
plt.ylabel("Count of Reviews")
plt.show()

"""Verified Purchase vs Non-Verified (Bar Plot / Pie Chart)
* Helps us understand how trustworthy reviews are. If too many are non-verified, ratings may be skewed.
* Pie chart → % of verified vs. non-verified reviews.
* Bar plot → Compare average star rating between the two groups.
"""

plt.figure(figsize=(6,4))
df['verified_purchase'].value_counts().plot(kind='bar', color=['skyblue','orange'])
plt.title("Verified vs Non-Verified Purchases")
plt.xlabel("Verified Purchase")
plt.ylabel("Count of Reviews")
plt.xticks(rotation=0)
plt.show()

# Compare average star rating
plt.figure(figsize=(6,4))
sns.barplot(data=df, x='verified_purchase', y='star_rating', estimator='mean', errorbar=None, hue='verified_purchase', palette='viridis', legend=False)
plt.title("Average Star Rating: Verified vs Non-Verified Purchases")
plt.xlabel("Verified Purchase")
plt.ylabel("Average Rating")
plt.show()

"""Review Length Distribution (Histogram / KDE)
* Short reviews (“Good book”) vs long detailed reviews give different insights.
* Histogram/KDE plot of word counts in reviews.
* Boxplot of length vs star rating → do longer reviews tend to be negative/positive?
"""

df['review_length'] = df['review_body'].astype(str).apply(lambda x: len(x.split()))

plt.figure(figsize=(8,5))
sns.histplot(df['review_length'], bins=50, kde=True, color="purple")
plt.title("Distribution of Review Lengths (in words)")
plt.xlabel("Review Length")
plt.ylabel("Count")
# plt.xlim(0, 1000)  # trim long tail for visibility
plt.show()

# Boxplot: review length vs star rating
plt.figure(figsize=(8,5))
sns.boxplot(data=df, x='star_rating', y='review_length', hue='star_rating', palette="coolwarm")
plt.title("Review Length by Star Rating")
plt.xlabel("Star Rating")
plt.ylabel("Review Length")
plt.show()

"""Top Reviewed Products (Bar Plot) with average rating
* Identifies which books are reviewed most.
* Horizontal bar chart of top 10 products with most reviews.
"""

top_books = df['product_title'].value_counts().head(10).index
top_df = df[df['product_title'].isin(top_books)]

# Compute number of reviews and average rating
book_stats = top_df.groupby('product_title').agg(
    num_reviews=('review_id', 'count'),
    avg_rating=('star_rating', 'mean')
).sort_values('num_reviews', ascending=False)

# Plotting
fig, ax1 = plt.subplots(figsize=(10,6))

# Bar plot for number of reviews
sns.barplot(
    x='num_reviews',
    y=book_stats.index,
    data=book_stats,
    palette='magma',
    hue=book_stats.index,
    legend=False,
    ax=ax1
)
ax1.set_xlabel("Number of Reviews")
ax1.set_ylabel("Book Title")
ax1.set_title("Top 10 Most Reviewed Books with Average Rating")

# Add average rating as text on bars
for i, (reviews, rating) in enumerate(zip(book_stats['num_reviews'], book_stats['avg_rating'])):
    ax1.text(reviews, i, f"{rating:.2f}★", va='center', fontweight='bold')

plt.show()

"""Star Rating vs. Helpful Votes (Boxplot / Violin Plot)
* Do 1-star or 5-star reviews get more attention?
* shows median and spread of helpful votes by rating.
"""

plt.figure(figsize=(10,6))
sns.boxplot(data=df, x='star_rating', y='helpful_votes', hue='star_rating', palette="Set2", legend=False)
plt.ylim(0, 50)  # limit y for readability (outliers can be very large)
plt.title("Helpful Votes by Star Rating")
plt.xlabel("Star Rating")
plt.ylabel("Helpful Votes")
plt.show()









