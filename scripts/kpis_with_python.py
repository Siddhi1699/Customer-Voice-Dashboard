# -*- coding: utf-8 -*-
"""KPI_with_python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16W6ZbzMR-HZEjH_aS9bsk9tiF4pEqb14

Computing KPIs with Python
"""

import pandas as pd
from collections import Counter


# Load dataset
df = pd.read_csv("clean_reviews.csv")
df['star_rating'] = df['star_rating'].astype(float)
df['helpful_votes'] = df['helpful_votes'].astype(int)
df['total_votes'] = df['total_votes'].astype(int)
df['review_length'] = df['review_body'].apply(lambda x: len(str(x).split()))
df['review_date'] = pd.to_datetime(df['review_date'])
df['year'] = df['review_date'].dt.year

# ---------------- KPIs ---------------- #

kpi_metrics = []

# 1. Total Reviews
total_reviews = len(df)
kpi_metrics.append(("Total Reviews", total_reviews, f"Dataset has {total_reviews} reviews."))

# 2. Reviews by Year
reviews_by_year = df.groupby('year')['review_id'].count().to_dict()
kpi_metrics.append(("Reviews by Year", reviews_by_year, "Shows yearly distribution of reviews."))

# 3. Reviews by Verified Purchase %
verified_pct = (df['verified_purchase'] == 'Y').mean() * 100
kpi_metrics.append(("Reviews by Verified Purchase %", round(verified_pct,2), f"{round(verified_pct,2)}% of reviews are from verified purchases."))

# 4. Average Star Rating
avg_rating = df['star_rating'].mean()
kpi_metrics.append(("Avg. Star Rating", round(avg_rating,2), f"Average rating across all reviews is {round(avg_rating,2)}."))

# 5. Rating Distribution %
rating_dist = df['star_rating'].value_counts(normalize=True).sort_index() * 100
kpi_metrics.append(("Rating Distribution", rating_dist.round(2).to_dict(), "Percentage distribution of 1★ to 5★ ratings."))

# 6. Positive Reviews %
positive_pct = (df['star_rating'] >= 4).mean() * 100
kpi_metrics.append(("Positive Reviews %", round(positive_pct,2), f"{round(positive_pct,2)}% of reviews are positive (4★ and 5★)."))

# 7. Negative Reviews %
negative_pct = (df['star_rating'] <= 2).mean() * 100
kpi_metrics.append(("Negative Reviews %", round(negative_pct,2), f"{round(negative_pct,2)}% of reviews are negative (1★ and 2★)."))

# 8. Helpful Vote Ratio
helpful_vote_ratio = df['helpful_votes'].sum() / df['total_votes'].sum()
kpi_metrics.append(("Helpful Vote Ratio", round(helpful_vote_ratio,2), f"Helpful votes divided by total votes = {round(helpful_vote_ratio,2)}"))

# 9. Avg. Helpful Votes per Review
avg_helpful_votes = df['helpful_votes'].mean()
kpi_metrics.append(("Avg. Helpful Votes per Review", round(avg_helpful_votes,2), f"Average helpful votes per review = {round(avg_helpful_votes,2)}"))

# 10. Top Keywords in Reviews
all_words = ' '.join(df['clean_review_no_stopwords'].dropna()).split()
top_keywords = [word for word, count in Counter(all_words).most_common(10)]
kpi_metrics.append(("Top Keywords in Reviews", top_keywords, "Most frequent words in review bodies."))

# 11. Avg. Review Length (words)
avg_review_length = df['review_length'].mean()
kpi_metrics.append(("Avg. Review Length (words)", round(avg_review_length,2), f"Average review length is {round(avg_review_length,2)} words."))

# 12. Top 10 Most Reviewed Books
top_books = df['product_title'].value_counts().head(10).to_dict()
kpi_metrics.append(("Top 10 Most Reviewed Books", top_books, "Books with highest number of reviews."))

# 13. Top Rated Books (avg rating >= 4.5 and >=50 reviews)
top_rated_books = df.groupby('product_title').filter(lambda x: len(x) >= 10 and x['star_rating'].mean() >= 4.5)
top_rated_books_list = top_rated_books['product_title'].unique().tolist()
kpi_metrics.append(("Top Rated Books", top_rated_books_list, "Books with avg rating >=4.5 and at least 50 reviews."))

# 14. Most Helpful Book (highest sum of helpful votes)
helpful_votes_by_book = df.groupby('product_title')['helpful_votes'].sum()
most_helpful_book = helpful_votes_by_book.idxmax()
kpi_metrics.append(("Most Helpful Book", most_helpful_book, "Book with highest total helpful votes."))

# ---------------- Display KPIs ---------------- #
for kpi, value, note in kpi_metrics:
    print(f"KPI: {kpi}")
    print(f"Value: {value}")
    print(f"Notes/Observation: {note}\n")